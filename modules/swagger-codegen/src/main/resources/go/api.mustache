{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"encoding/json"
	"io/ioutil"
	"reflect"
)

type DefaultApi struct {
	Configuration Configuration
}

func NewDefaultApi() *DefaultApi {
	configuration := NewConfiguration()
	return &DefaultApi{
		Configuration: *configuration,
	}
}

func NewDefaultApiWithBasePath(basePath string) *DefaultApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &DefaultApi{
		Configuration: *configuration,
	}
}
{{#operation}}

/**
 * {{summary}}{{#notes}}
 * {{notes}}{{/notes}}
 *
 * @param params This is an {{parameterBuilderParams}} struct which accepts following parameters:
{{#allParams}} ** @param {{paramNameUpperCase}} {{description}}
{{/allParams}} * @return {{#returnType}}{{^isListContainer}}*{{/isListContainer}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
 */
func (a {{{classname}}}) {{{nickname}}}(params *{{parameterBuilderParams}}) ({{#returnType}}{{^isListContainer}}*{{/isListContainer}}{{{returnType}}}, {{/returnType}}*APIResponse, error) {

	var httpMethod = "{{httpMethod}}"
	// create path and map variables
	path := a.Configuration.BasePath + "{{path}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	headerParams := make(map[string]string)
	queryParams := []QueryParams{}
	formParams := []FormParams{}
{{#authMethods}}
	// authentication '({{name}})' required
{{#isApiKey}}
{{#isKeyInHeader}}
	// set key with prefix in header
	headerParams["{{keyParamName}}"] = a.Configuration.GetAPIKeyWithPrefix("{{keyParamName}}")
{{/isKeyInHeader}}
{{#isKeyInQuery}}
	// set key with prefix in query string
	headerParams["{{keyParamName}}"] =  a.Configuration.GetAPIKeyWithPrefix("{{keyParamName}}")
{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != ""{
		localVarHeaderParams["Authorization"] =  "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
{{/isBasic}}
{{#isOAuth}}
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
{{/isOAuth}}
{{/authMethods}}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
	{{#hasQueryParams}}
	{{#queryParams}}
	{{#isListContainer}}
	for _, f := range params.{{paramNameUpperCase}} {
		queryParams = append(queryParams, QueryParams{
			Item1: "{{baseName}}",
			Item2: a.Configuration.APIClient.ParameterToString(f)})
	}

	{{/isListContainer}}
	{{^isListContainer}}
	if !isZero(reflect.ValueOf(params.{{paramNameUpperCase}})) {
		queryParams = append(queryParams, QueryParams{
			Item1: "{{baseName}}",
			Item2: a.Configuration.APIClient.ParameterToString(params.{{paramNameUpperCase}})})
	}
	{{/isListContainer}}
	{{/queryParams}}
	{{/hasQueryParams}}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ {{#consumes}}"{{{mediaType}}}", {{/consumes}} }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		{{#produces}}
		"{{{mediaType}}}",
		{{/produces}}
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
{{#hasHeaderParams}}
{{#headerParams}}
	// header params "{{baseName}}"
	localVarHeaderParams["{{baseName}}"] = a.Configuration.APIClient.ParameterToString({{paramName}}, "")
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isListContainer}}
	for _, f := range params.{{paramNameUpperCase}} {
		formParams = append(formParams, FormParams{
			Item1: "{{baseName}}",
			Item2: a.Configuration.APIClient.ParameterToString(f)})
	}

	{{/isListContainer}}
	{{^isListContainer}}
	if !isZero(reflect.ValueOf(params.{{paramNameUpperCase}})) {
		formParams = append(formParams, FormParams{
			Item1: "{{baseName}}",
			Item2: a.Configuration.APIClient.ParameterToString(params.{{paramNameUpperCase}})})
	}
	{{/isListContainer}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}	// body params
	localVarPostBody = &{{paramName}}
{{/bodyParams}}
{{/hasBodyParam}}
{{#returnType}}
	var successPayload = new({{returnType}})
{{/returnType}}
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, headerParams, queryParams, formParams)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse), err
	}

	defer httpResponse.Body.Close()
	resBody, err := ioutil.ReadAll(httpResponse.Body)

	err = json.Unmarshal(resBody, &successPayload)
	return successPayload, NewAPIResponse(httpResponse), err
}
{{/operation}}{{/operations}}
